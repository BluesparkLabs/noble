
@mixin small {
  @media (max-width: #{$narrow-width}) {
    @content;
  }
}

@mixin small-and-narrow {
  @media (max-width: #{$normal-width}) {
    @content;
  }
}

@mixin narrow {
  @media (min-width: #{$narrow-width + 1px}) and (max-width: #{$normal-width}) {
    @content;
  }
}

@mixin narrow-and-higher {
  @media (min-width: #{$narrow-width + 1px}) {
    @content;
  }
}

@mixin normal {
  @media (min-width: #{$normal-width + 1px}) {
    @content;
  }
}

@mixin wide($width-offset: 0) {
  @media (min-width: #{$wide-width} + #{$width-offset}) {
    @content;
  }
}

// A container that expands to the specified max-width with appropriate
// gutters for mobile. Will use the $max-page-width sitewide variable
// by default when no specific max-width is provided.
@mixin container($max-width: $max-page-width, $gutters: $gutter-width) {
  max-width: $max-width;
  padding-left: $gutters;
  padding-right: $gutters;
  box-sizing: content-box;
}

// A container that expands to a comfortable reading line length for the site,
// with appropriate gutters for mobile.
@mixin container-narrow() {
  @include container($max-line-length);
}

@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    width: 100%;
  }
}

@mixin menu-inline() {
  @include clearfix();
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;

  > li {
    ul,
    ol {
      display: none;
    }
  }
}

@mixin form-inline() {
  .form-item,
  .form-actions {
    float: left;
  }
}

// scss-lint:disable ImportantRule
@mixin visually-hidden() {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
  width: 1px;
  word-wrap: normal;
  pointer-events: none;
}

@mixin hide-text() {
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

// scss-lint:disable UnnecessaryParentReference
@mixin firefox-only {
  @at-root {
    @-moz-document url-prefix() {
      & {
        @content;
      }
    }
  }
}
